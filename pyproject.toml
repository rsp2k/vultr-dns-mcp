[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vultr-dns-mcp"
version = "1.0.3"
description = "A comprehensive Model Context Protocol (MCP) server for managing Vultr DNS records"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Ryan Malloy", email = "ryan@supported.systems"}
]
maintainers = [
    {name = "Ryan Malloy", email = "ryan@supported.systems"}
]
keywords = [
    "vultr", 
    "dns", 
    "mcp", 
    "model-context-protocol", 
    "dns-management", 
    "api", 
    "mcp-server"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: Name Service (DNS)",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications",
    "Environment :: Console",
    "Framework :: AsyncIO"
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.0.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "click>=8.0.0"
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage[toml]>=7.0.0"
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0"
]

[project.urls]
Homepage = "https://github.com/rsp2k/vultr-dns-mcp"
Documentation = "https://vultr-dns-mcp.readthedocs.io/"
Repository = "https://github.com/rsp2k/vultr-dns-mcp.git"
"Bug Tracker" = "https://github.com/rsp2k/vultr-dns-mcp/issues"
Changelog = "https://github.com/rsp2k/vultr-dns-mcp/blob/main/CHANGELOG.md"

[project.scripts]
vultr-dns-mcp = "vultr_dns_mcp:main"
vultr-dns-server = "vultr_dns_mcp.cli:server_command"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
vultr_dns_mcp = ["py.typed"]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
]
unfixable = ["F841"]  # remove unused variables

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "ARG", # unused arguments are common in tests
    "PLR2004", # magic values are OK in tests
    "SIM117", # combine if branches
]

[tool.ruff.lint.isort]
known-first-party = ["vultr_dns_mcp"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["mcp.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/vultr_dns_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests requiring external services",
    "mcp: MCP protocol specific tests",
    "slow: Tests that take a long time to run",
    "network: Tests requiring network access",
    "api: Tests that interact with the Vultr API",
    "cli: Tests for command-line interface"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
