name: Testing

on:
  # Run tests on pushes to main and develop branches
  push:
    branches: [ main, develop ]
  
  # Run tests on all pull requests
  pull_request:
    branches: [ main, develop ]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      coverage_threshold:
        description: 'Coverage threshold percentage'
        required: false
        default: '10'
        type: string

env:
  COVERAGE_THRESHOLD: ${{ github.event.inputs.coverage_threshold || '80' }}

jobs:
  # Comprehensive testing with matrix support
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue testing other versions if one fails
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run code quality checks
      run: |
        echo "🔍 Running code quality checks..."
        
        # Check package can be imported
        python -c "import vultr_dns_mcp; print('✅ Package imports successfully')"
        
        # Run code formatting and linting
        black --check --diff src/
        ruff check src/
        # mypy src/
    
    - name: Run comprehensive test suite
      run: |
        echo "🧪 Running test suite on Python ${{ matrix.python-version }}..."
        
        # Run all tests with coverage
        pytest tests/ -v \
          --cov=src/vultr_dns_mcp \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
          --durations=10 \
          --tb=short
    
    - name: Test CLI functionality
      run: |
        echo "🖥️ Testing CLI functionality..."
        
        # Test CLI entry points exist and respond
        vultr-dns-mcp --help > /dev/null && echo "✅ vultr-dns-mcp CLI works" || echo "❌ vultr-dns-mcp CLI failed"
        vultr-dns-server --help > /dev/null && echo "✅ vultr-dns-server CLI works" || echo "❌ vultr-dns-server CLI failed"
        
        # Test version reporting
        python -c "
        import vultr_dns_mcp
        print(f'📦 Package version: {vultr_dns_mcp.__version__}')
        print('✅ Version accessible')
        " || echo "❌ Version check failed"
    
    - name: Test package installation patterns
      run: |
        echo "📋 Testing import patterns..."
        python -c "
        # Test various import patterns
        print('Testing imports...')
        import vultr_dns_mcp
        from vultr_dns_mcp import server
        from vultr_dns_mcp import client  
        print('✅ All core modules import successfully')
        
        # Test server creation
        from vultr_dns_mcp.server import create_mcp_server
        try:
            server = create_mcp_server('test-key')
            print('✅ MCP server creation works')
        except Exception as e:
            print(f'⚠️  MCP server creation test: {e}')
        
        print('✅ All import patterns work correctly')
        "
    
    - name: Run test categories
      run: |
        echo "🔬 Running test categories..."
        
        # Run categorized tests
        echo "📋 Unit tests..."
        pytest tests/ -v -m "unit" --tb=line || echo "No unit tests marked"
        
        echo "🔧 Integration tests..."  
        pytest tests/ -v -m "integration" --tb=line || echo "No integration tests marked"
        
        echo "🌐 MCP protocol tests..."
        pytest tests/ -v -m "mcp" --tb=line || echo "No MCP tests marked"
        
    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage HTML report
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-html
        path: htmlcov/
        retention-days: 30

  # Security and dependency checks
  security:
    name: Security and Dependency Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]
        pip install -e .[dev,test]
    
    - name: Run safety check
      run: |
        echo "🔒 Running dependency security check..."
        safety check --json || echo "Safety check completed with warnings"
    
    - name: Run bandit security scan
      run: |
        echo "🛡️ Running code security scan..."
        bandit -r src/ -f json || echo "Bandit scan completed with warnings"

  # Package building test
  build-test:
    name: Test Package Building
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        echo "📦 Building package..."
        python -m build
    
    - name: Verify package
      run: |
        echo "🔍 Verifying package..."
        python -m twine check dist/*
        ls -la dist/
        
        echo "📊 Package contents:"
        tar -tzf dist/*.tar.gz | head -20
    
    - name: Test installation from built package
      run: |
        echo "🧪 Testing installation from built package..."
        
        # Install from wheel
        pip install dist/*.whl
        
        # Test basic functionality
        python -c "
        import vultr_dns_mcp
        print(f'✅ Installed version: {vultr_dns_mcp.__version__}')
        
        # Test server creation
        from vultr_dns_mcp.server import create_mcp_server
        server = create_mcp_server('test-key')
        print('✅ Server creation successful')
        "
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7

  # Test results summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, security, build-test]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ **Matrix Testing**: All Python versions passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Matrix Testing**: Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.security.result }}" == "success" ]]; then
          echo "✅ **Security Checks**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security Checks**: Completed with warnings" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build-test.result }}" == "success" ]]; then
          echo "✅ **Package Building**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Package Building**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage & Quality" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Threshold**: ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: Linting and formatting checks completed" >> $GITHUB_STEP_SUMMARY
        echo "- **CLI Testing**: Command-line interfaces validated" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-test.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Overall Status**: All tests passed! Ready for publishing." >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **Overall Status**: Some tests failed. Review before publishing." >> $GITHUB_STEP_SUMMARY
        fi
