name: Publish to PyPI

on:
  # Trigger on version tags
  push:
    tags:
      - 'v*'
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI instead of PyPI'
        required: false
        default: false
        type: boolean
      skip_existing:
        description: 'Skip if version already exists'
        required: false
        default: true
        type: boolean
      force_publish:
        description: 'Force publish without waiting for tests (not recommended)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Wait for testing workflow to complete successfully
  wait-for-tests:
    name: Wait for Tests to Complete
    runs-on: ubuntu-latest
    if: github.event.inputs.force_publish != 'true'
    outputs:
      tests_passed: ${{ steps.check-tests.outputs.tests_passed }}
    
    steps:
    - name: Check if tests are required
      id: check-tests
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          echo "Tag push detected - checking for recent test run"
          echo "tests_passed=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Manual trigger - tests should be run separately"
          echo "tests_passed=true" >> $GITHUB_OUTPUT
        else
          echo "tests_passed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Recommend running tests
      if: steps.check-tests.outputs.tests_passed != 'true'
      run: |
        echo "🚨 **Recommendation**: Run the Testing workflow before publishing"
        echo "You can:"
        echo "1. Go to Actions → Testing → Run workflow"
        echo "2. Or push to main branch to trigger automatic testing"
        echo "3. Or use 'force_publish: true' to skip this check (not recommended)"
        exit 1

  # Quick validation (lightweight checks only)
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: [wait-for-tests]
    if: always() && (needs.wait-for-tests.result == 'success' || needs.wait-for-tests.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Quick validation
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
        echo "🔍 Running quick validation..."
        
        # Basic import test
        python -c "import vultr_dns_mcp; print(f'✅ Package imports: v{vultr_dns_mcp.__version__}')"
        
        # CLI smoke test
        vultr-dns-mcp --help > /dev/null && echo "✅ CLI responds" || echo "❌ CLI failed"

  # Build the package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper version detection
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version info
      id: version
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a prerelease (contains alpha, beta, rc, or dev)
        if echo "$VERSION" | grep -qE "(a|b|rc|dev)"; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "📦 Detected version: $VERSION"
    
    - name: Build package
      run: |
        echo "📦 Building package..."
        python -m build
    
    - name: Verify package
      run: |
        echo "🔍 Verifying package..."
        python -m twine check dist/*
        ls -la dist/
        
        # Check that version matches tag (if triggered by tag)
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION="${{ steps.version.outputs.version }}"
          if [[ "$TAG_VERSION" != "$PACKAGE_VERSION" ]]; then
            echo "❌ Error: Tag version ($TAG_VERSION) doesn't match package version ($PACKAGE_VERSION)"
            exit 1
          else
            echo "✅ Version matches tag: $TAG_VERSION"
          fi
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30

  # Publish to TestPyPI (for testing)
  publish-test:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.test_pypi == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/vultr-dns-mcp
    permissions:
      id-token: write  # Required for trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: ${{ github.event.inputs.skip_existing == 'true' }}
        print-hash: true

  # Publish to PyPI (production)
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi != 'true')
    environment:
      name: pypi
      url: https://pypi.org/p/vultr-dns-mcp
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required for GitHub releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: ${{ github.event.inputs.skip_existing == 'true' }}
        print-hash: true
    
    # Create GitHub release
    - name: Generate changelog
      id: changelog
      run: |
        if [[ -f CHANGELOG.md ]]; then
          # Extract changelog for current version
          VERSION="${{ needs.build.outputs.version }}"
          awk "/^## \\[?$VERSION\\]?/ {found=1; next} /^## / {found=0} found {print}" CHANGELOG.md > current_changelog.md
          
          if [[ -s current_changelog.md ]]; then
            echo "changelog_file=current_changelog.md" >> $GITHUB_OUTPUT
          else
            echo "No changelog entry found for version $VERSION"
            echo "changelog_file=" >> $GITHUB_OUTPUT
          fi
        else
          echo "No CHANGELOG.md found"
          echo "changelog_file=" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      with:
        name: Release v${{ needs.build.outputs.version }}
        tag_name: ${{ github.ref_name }}
        body_path: ${{ steps.changelog.outputs.changelog_file }}
        files: dist/*
        prerelease: ${{ needs.build.outputs.is_prerelease == 'true' }}
        generate_release_notes: ${{ steps.changelog.outputs.changelog_file == '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Test installation from PyPI
  test-published:
    name: Test Published Package
    runs-on: ubuntu-latest
    needs: [build, publish]
    if: success()
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Wait for PyPI propagation
      run: |
        echo "⏳ Waiting for PyPI propagation..."
        sleep 60  # Give PyPI some time to propagate
    
    - name: Install from PyPI
      run: |
        pip install --upgrade pip
        pip install vultr-dns-mcp==${{ needs.build.outputs.version }}
    
    - name: Test installation
      run: |
        echo "🧪 Testing installed package..."
        vultr-dns-mcp --version
        vultr-dns-mcp --help > /dev/null
        python -c "import vultr_dns_mcp; print(f'✅ vultr-dns-mcp v{vultr_dns_mcp.__version__} installed successfully')"

  # Publication summary
  notify:
    name: Publication Summary
    runs-on: ubuntu-latest
    needs: [build, publish, test-published, wait-for-tests]
    if: always()
    
    steps:
    - name: Generate publication summary
      run: |
        echo "# 📦 PyPI Publication Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Pre-release:** ${{ needs.build.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** https://pypi.org/project/vultr-dns-mcp/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test status
        if [[ "${{ needs.wait-for-tests.result }}" == "success" || "${{ needs.wait-for-tests.result }}" == "skipped" ]]; then
          echo "✅ **Testing:** Requirements satisfied" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Testing:** Tests not verified" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Publication status
        if [[ "${{ needs.publish.result }}" == "success" ]]; then
          echo "✅ **Publication:** Successfully published to PyPI" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Installation test status
        if [[ "${{ needs.test-published.result }}" == "success" ]]; then
          echo "✅ **Installation Test:** Passed on all Python versions" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Installation Test:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Testing Workflow](../actions/workflows/test.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- [PyPI Package](https://pypi.org/project/vultr-dns-mcp/)" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Releases](../releases)" >> $GITHUB_STEP_SUMMARY